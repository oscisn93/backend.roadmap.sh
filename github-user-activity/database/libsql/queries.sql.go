// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package libsql

import (
	"context"
	"database/sql"
	"time"
)

const addActor = `-- name: AddActor :one
INSERT INTO
  actor (
    login,
    display_login,
    gravatar_id,
    url,
    avatar_url
  )
VALUES
  (?, ?, ?, ?, ?) RETURNING id, login, display_login, gravatar_id, url, avatar_url
`

type AddActorParams struct {
	Login        string         `json:"login"`
	DisplayLogin sql.NullString `json:"display_login"`
	GravatarID   sql.NullString `json:"gravatar_id"`
	Url          sql.NullString `json:"url"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
}

func (q *Queries) AddActor(ctx context.Context, arg AddActorParams) (Actor, error) {
	row := q.db.QueryRowContext(ctx, addActor,
		arg.Login,
		arg.DisplayLogin,
		arg.GravatarID,
		arg.Url,
		arg.AvatarUrl,
	)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.DisplayLogin,
		&i.GravatarID,
		&i.Url,
		&i.AvatarUrl,
	)
	return i, err
}

const addCommit = `-- name: AddCommit :one
INSERT INTO
  commit (
    payload_id,
    sha,
    author_email,
    author_name,
    message,
    url
  )
VALUES
  (?, ?, ?, ?, ?, ?) RETURNING id, payload_id, sha, author_email, author_name, message, url
`

type AddCommitParams struct {
	PayloadID   int64  `json:"payload_id"`
	Sha         string `json:"sha"`
	AuthorEmail string `json:"author_email"`
	AuthorName  string `json:"author_name"`
	Message     string `json:"message"`
	Url         string `json:"url"`
}

func (q *Queries) AddCommit(ctx context.Context, arg AddCommitParams) (Commit, error) {
	row := q.db.QueryRowContext(ctx, addCommit,
		arg.PayloadID,
		arg.Sha,
		arg.AuthorEmail,
		arg.AuthorName,
		arg.Message,
		arg.Url,
	)
	var i Commit
	err := row.Scan(
		&i.ID,
		&i.PayloadID,
		&i.Sha,
		&i.AuthorEmail,
		&i.AuthorName,
		&i.Message,
		&i.Url,
	)
	return i, err
}

const addEvent = `-- name: AddEvent :one
INSERT INTO
  event (
    event_id,
    type,
    actor_id,
    repo_id,
    payload_id,
    public,
    created_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?) RETURNING id, event_id, type, actor_id, repo_id, payload_id, public, created_at, cached_at
`

type AddEventParams struct {
	EventID   string    `json:"event_id"`
	Type      string    `json:"type"`
	ActorID   int64     `json:"actor_id"`
	RepoID    int64     `json:"repo_id"`
	PayloadID int64     `json:"payload_id"`
	Public    bool      `json:"public"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, addEvent,
		arg.EventID,
		arg.Type,
		arg.ActorID,
		arg.RepoID,
		arg.PayloadID,
		arg.Public,
		arg.CreatedAt,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.ActorID,
		&i.RepoID,
		&i.PayloadID,
		&i.Public,
		&i.CreatedAt,
		&i.CachedAt,
	)
	return i, err
}

const addFork = `-- name: AddFork :one
INSERT INTO
  fork (
    forkee_id,
    forkee_name,
    forkee_full_name,
    forkee_private
  )
VALUES
  (?, ?, ?, ?) RETURNING id, forkee_id, forkee_name, forkee_full_name, forkee_private
`

type AddForkParams struct {
	ForkeeID       int64  `json:"forkee_id"`
	ForkeeName     string `json:"forkee_name"`
	ForkeeFullName string `json:"forkee_full_name"`
	ForkeePrivate  bool   `json:"forkee_private"`
}

func (q *Queries) AddFork(ctx context.Context, arg AddForkParams) (Fork, error) {
	row := q.db.QueryRowContext(ctx, addFork,
		arg.ForkeeID,
		arg.ForkeeName,
		arg.ForkeeFullName,
		arg.ForkeePrivate,
	)
	var i Fork
	err := row.Scan(
		&i.ID,
		&i.ForkeeID,
		&i.ForkeeName,
		&i.ForkeeFullName,
		&i.ForkeePrivate,
	)
	return i, err
}

const addGollumPage = `-- name: AddGollumPage :one
INSERT INTO
  gollum (page_name, title, summary, action, sha, html_url)
VALUES
  (?, ?, ?, ?, ?, ?) RETURNING id, page_name, title, summary, "action", sha, html_url
`

type AddGollumPageParams struct {
	PageName string         `json:"page_name"`
	Title    string         `json:"title"`
	Summary  sql.NullString `json:"summary"`
	Action   string         `json:"action"`
	Sha      string         `json:"sha"`
	HtmlUrl  string         `json:"html_url"`
}

func (q *Queries) AddGollumPage(ctx context.Context, arg AddGollumPageParams) (Gollum, error) {
	row := q.db.QueryRowContext(ctx, addGollumPage,
		arg.PageName,
		arg.Title,
		arg.Summary,
		arg.Action,
		arg.Sha,
		arg.HtmlUrl,
	)
	var i Gollum
	err := row.Scan(
		&i.ID,
		&i.PageName,
		&i.Title,
		&i.Summary,
		&i.Action,
		&i.Sha,
		&i.HtmlUrl,
	)
	return i, err
}

const addIssue = `-- name: AddIssue :one
INSERT INTO
  issue (
    action,
    issue_id,
    number,
    state,
    title,
    user_id,
    body,
    created_at,
    updated_at,
    closed_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, "action", issue_id, number, title, user_id, state, body, created_at, updated_at, closed_at
`

type AddIssueParams struct {
	Action    string         `json:"action"`
	IssueID   int64          `json:"issue_id"`
	Number    int64          `json:"number"`
	State     string         `json:"state"`
	Title     string         `json:"title"`
	UserID    int64          `json:"user_id"`
	Body      sql.NullString `json:"body"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	ClosedAt  sql.NullTime   `json:"closed_at"`
}

func (q *Queries) AddIssue(ctx context.Context, arg AddIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, addIssue,
		arg.Action,
		arg.IssueID,
		arg.Number,
		arg.State,
		arg.Title,
		arg.UserID,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ClosedAt,
	)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.IssueID,
		&i.Number,
		&i.Title,
		&i.UserID,
		&i.State,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const addIssueComment = `-- name: AddIssueComment :one
INSERT INTO
  issue_comment (
    action,
    issue_id,
    comment_id,
    comment_user_id,
    body,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?) RETURNING id, "action", issue_id, comment_id, comment_user_id, body, created_at, updated_at
`

type AddIssueCommentParams struct {
	Action        string    `json:"action"`
	IssueID       int64     `json:"issue_id"`
	CommentID     int64     `json:"comment_id"`
	CommentUserID int64     `json:"comment_user_id"`
	Body          string    `json:"body"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) AddIssueComment(ctx context.Context, arg AddIssueCommentParams) (IssueComment, error) {
	row := q.db.QueryRowContext(ctx, addIssueComment,
		arg.Action,
		arg.IssueID,
		arg.CommentID,
		arg.CommentUserID,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i IssueComment
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.IssueID,
		&i.CommentID,
		&i.CommentUserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addMember = `-- name: AddMember :one
INSERT INTO
  member (action, member_id)
VALUES
  (?, ?) RETURNING id, "action", member_id
`

type AddMemberParams struct {
	Action   string `json:"action"`
	MemberID int64  `json:"member_id"`
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, addMember, arg.Action, arg.MemberID)
	var i Member
	err := row.Scan(&i.ID, &i.Action, &i.MemberID)
	return i, err
}

const addPRReviewComment = `-- name: AddPRReviewComment :one
INSERT INTO
  pr_review_comment (
    action,
    comment_id,
    pull_request_id,
    user_id,
    body,
    created_at,
    updated_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?) RETURNING id, "action", comment_id, pull_request_id, user_id, body, created_at, updated_at
`

type AddPRReviewCommentParams struct {
	Action        string    `json:"action"`
	CommentID     int64     `json:"comment_id"`
	PullRequestID int64     `json:"pull_request_id"`
	UserID        int64     `json:"user_id"`
	Body          string    `json:"body"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) AddPRReviewComment(ctx context.Context, arg AddPRReviewCommentParams) (PrReviewComment, error) {
	row := q.db.QueryRowContext(ctx, addPRReviewComment,
		arg.Action,
		arg.CommentID,
		arg.PullRequestID,
		arg.UserID,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PrReviewComment
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.CommentID,
		&i.PullRequestID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addPullRequest = `-- name: AddPullRequest :one
INSERT INTO
  pull_request (
    action,
    number,
    pull_request_id,
    state,
    title,
    user_id,
    body,
    created_at,
    updated_at,
    closed_at,
    merged_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, "action", number, pull_request_id, state, title, user_id, body, created_at, updated_at, closed_at, merged_at
`

type AddPullRequestParams struct {
	Action        string         `json:"action"`
	Number        int64          `json:"number"`
	PullRequestID int64          `json:"pull_request_id"`
	State         string         `json:"state"`
	Title         string         `json:"title"`
	UserID        int64          `json:"user_id"`
	Body          sql.NullString `json:"body"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	ClosedAt      sql.NullTime   `json:"closed_at"`
	MergedAt      sql.NullTime   `json:"merged_at"`
}

func (q *Queries) AddPullRequest(ctx context.Context, arg AddPullRequestParams) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, addPullRequest,
		arg.Action,
		arg.Number,
		arg.PullRequestID,
		arg.State,
		arg.Title,
		arg.UserID,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ClosedAt,
		arg.MergedAt,
	)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.Number,
		&i.PullRequestID,
		&i.State,
		&i.Title,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.MergedAt,
	)
	return i, err
}

const addPullRequestReview = `-- name: AddPullRequestReview :one
INSERT INTO
  pull_request_review (
    action,
    review_id,
    pull_request_id,
    user_id,
    body,
    submitted_at
  )
VALUES
  (?, ?, ?, ?, ?, ?) RETURNING id, "action", review_id, pull_request_id, user_id, body, submitted_at
`

type AddPullRequestReviewParams struct {
	Action        string         `json:"action"`
	ReviewID      int64          `json:"review_id"`
	PullRequestID int64          `json:"pull_request_id"`
	UserID        int64          `json:"user_id"`
	Body          sql.NullString `json:"body"`
	SubmittedAt   time.Time      `json:"submitted_at"`
}

func (q *Queries) AddPullRequestReview(ctx context.Context, arg AddPullRequestReviewParams) (PullRequestReview, error) {
	row := q.db.QueryRowContext(ctx, addPullRequestReview,
		arg.Action,
		arg.ReviewID,
		arg.PullRequestID,
		arg.UserID,
		arg.Body,
		arg.SubmittedAt,
	)
	var i PullRequestReview
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReviewID,
		&i.PullRequestID,
		&i.UserID,
		&i.Body,
		&i.SubmittedAt,
	)
	return i, err
}

const addPush = `-- name: AddPush :one
INSERT INTO
  push (
    push_id,
    repository_id,
    size,
    distinct_size,
    ref,
    head,
    before
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?) RETURNING id, push_id, repository_id, size, distinct_size, ref, head, "before"
`

type AddPushParams struct {
	PushID       string `json:"push_id"`
	RepositoryID int64  `json:"repository_id"`
	Size         int64  `json:"size"`
	DistinctSize int64  `json:"distinct_size"`
	Ref          string `json:"ref"`
	Head         string `json:"head"`
	Before       string `json:"before"`
}

func (q *Queries) AddPush(ctx context.Context, arg AddPushParams) (Push, error) {
	row := q.db.QueryRowContext(ctx, addPush,
		arg.PushID,
		arg.RepositoryID,
		arg.Size,
		arg.DistinctSize,
		arg.Ref,
		arg.Head,
		arg.Before,
	)
	var i Push
	err := row.Scan(
		&i.ID,
		&i.PushID,
		&i.RepositoryID,
		&i.Size,
		&i.DistinctSize,
		&i.Ref,
		&i.Head,
		&i.Before,
	)
	return i, err
}

const addRefCreate = `-- name: AddRefCreate :one
INSERT INTO
  ref_create (
    ref,
    ref_type,
    master_branch,
    description,
    pusher_type
  )
VALUES
  (?, ?, ?, ?, ?) RETURNING id, ref, ref_type, master_branch, description, pusher_type
`

type AddRefCreateParams struct {
	Ref          sql.NullString `json:"ref"`
	RefType      string         `json:"ref_type"`
	MasterBranch sql.NullString `json:"master_branch"`
	Description  sql.NullString `json:"description"`
	PusherType   string         `json:"pusher_type"`
}

func (q *Queries) AddRefCreate(ctx context.Context, arg AddRefCreateParams) (RefCreate, error) {
	row := q.db.QueryRowContext(ctx, addRefCreate,
		arg.Ref,
		arg.RefType,
		arg.MasterBranch,
		arg.Description,
		arg.PusherType,
	)
	var i RefCreate
	err := row.Scan(
		&i.ID,
		&i.Ref,
		&i.RefType,
		&i.MasterBranch,
		&i.Description,
		&i.PusherType,
	)
	return i, err
}

const addRefDelete = `-- name: AddRefDelete :one
INSERT INTO
  ref_delete (ref, ref_type)
VALUES
  (?, ?) RETURNING id, ref, ref_type
`

type AddRefDeleteParams struct {
	Ref     sql.NullString `json:"ref"`
	RefType string         `json:"ref_type"`
}

func (q *Queries) AddRefDelete(ctx context.Context, arg AddRefDeleteParams) (RefDelete, error) {
	row := q.db.QueryRowContext(ctx, addRefDelete, arg.Ref, arg.RefType)
	var i RefDelete
	err := row.Scan(&i.ID, &i.Ref, &i.RefType)
	return i, err
}

const addRelease = `-- name: AddRelease :one
INSERT INTO
  release (
    action,
    release_id,
    tag_name,
    target_commitish,
    name,
    body,
    prerelease,
    created_at,
    published_at
  )
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, "action", release_id, tag_name, target_commitish, name, body, draft, prerelease, created_at, published_at
`

type AddReleaseParams struct {
	Action          string         `json:"action"`
	ReleaseID       int64          `json:"release_id"`
	TagName         string         `json:"tag_name"`
	TargetCommitish string         `json:"target_commitish"`
	Name            sql.NullString `json:"name"`
	Body            sql.NullString `json:"body"`
	Prerelease      bool           `json:"prerelease"`
	CreatedAt       time.Time      `json:"created_at"`
	PublishedAt     time.Time      `json:"published_at"`
}

func (q *Queries) AddRelease(ctx context.Context, arg AddReleaseParams) (Release, error) {
	row := q.db.QueryRowContext(ctx, addRelease,
		arg.Action,
		arg.ReleaseID,
		arg.TagName,
		arg.TargetCommitish,
		arg.Name,
		arg.Body,
		arg.Prerelease,
		arg.CreatedAt,
		arg.PublishedAt,
	)
	var i Release
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReleaseID,
		&i.TagName,
		&i.TargetCommitish,
		&i.Name,
		&i.Body,
		&i.Draft,
		&i.Prerelease,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const addRepo = `-- name: AddRepo :one
INSERT INTO
  repo (name, url)
VALUES
  (?, ?) RETURNING id, name, url
`

type AddRepoParams struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) AddRepo(ctx context.Context, arg AddRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, addRepo, arg.Name, arg.Url)
	var i Repo
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const addTeamAdd = `-- name: AddTeamAdd :one
INSERT INTO
  team_add (team_id, team_name, team_slug)
VALUES
  (?, ?, ?) RETURNING id, team_id, team_name, team_slug
`

type AddTeamAddParams struct {
	TeamID   int64  `json:"team_id"`
	TeamName string `json:"team_name"`
	TeamSlug string `json:"team_slug"`
}

func (q *Queries) AddTeamAdd(ctx context.Context, arg AddTeamAddParams) (TeamAdd, error) {
	row := q.db.QueryRowContext(ctx, addTeamAdd, arg.TeamID, arg.TeamName, arg.TeamSlug)
	var i TeamAdd
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.TeamName,
		&i.TeamSlug,
	)
	return i, err
}

const addWatch = `-- name: AddWatch :one
INSERT INTO
  watch (action)
VALUES
  (?) RETURNING id, "action"
`

func (q *Queries) AddWatch(ctx context.Context, action string) (Watch, error) {
	row := q.db.QueryRowContext(ctx, addWatch, action)
	var i Watch
	err := row.Scan(&i.ID, &i.Action)
	return i, err
}

const deleteActor = `-- name: DeleteActor :exec
DELETE FROM actor
WHERE
  id = ?
`

func (q *Queries) DeleteActor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActor, id)
	return err
}

const deleteCommit = `-- name: DeleteCommit :exec
DELETE FROM commit
WHERE
  id = ?
`

func (q *Queries) DeleteCommit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCommit, id)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM event
WHERE
  id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const deleteFork = `-- name: DeleteFork :exec
DELETE FROM fork
WHERE
  id = ?
`

func (q *Queries) DeleteFork(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFork, id)
	return err
}

const deleteGollumPage = `-- name: DeleteGollumPage :exec
DELETE FROM gollum
WHERE
  id = ?
`

func (q *Queries) DeleteGollumPage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGollumPage, id)
	return err
}

const deleteIssue = `-- name: DeleteIssue :exec
DELETE FROM issue
WHERE
  id = ?
`

func (q *Queries) DeleteIssue(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIssue, id)
	return err
}

const deleteIssueComment = `-- name: DeleteIssueComment :exec
DELETE FROM issue_comment
WHERE
  id = ?
`

func (q *Queries) DeleteIssueComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIssueComment, id)
	return err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM member
WHERE
  id = ?
`

func (q *Queries) DeleteMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMember, id)
	return err
}

const deletePRReviewComment = `-- name: DeletePRReviewComment :exec
DELETE FROM pr_review_comment
WHERE
  id = ?
`

func (q *Queries) DeletePRReviewComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePRReviewComment, id)
	return err
}

const deletePullRequest = `-- name: DeletePullRequest :exec
DELETE FROM pull_request
WHERE
  id = ?
`

func (q *Queries) DeletePullRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePullRequest, id)
	return err
}

const deletePullRequestReview = `-- name: DeletePullRequestReview :exec
DELETE FROM pull_request_review
WHERE
  id = ?
`

func (q *Queries) DeletePullRequestReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePullRequestReview, id)
	return err
}

const deletePush = `-- name: DeletePush :exec
DELETE FROM push
WHERE
  id = ?
`

func (q *Queries) DeletePush(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePush, id)
	return err
}

const deleteRefCreate = `-- name: DeleteRefCreate :exec
DELETE FROM ref_create
WHERE
  id = ?
`

func (q *Queries) DeleteRefCreate(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRefCreate, id)
	return err
}

const deleteRefDelete = `-- name: DeleteRefDelete :exec
DELETE FROM ref_delete
WHERE
  id = ?
`

func (q *Queries) DeleteRefDelete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRefDelete, id)
	return err
}

const deleteRelease = `-- name: DeleteRelease :exec
DELETE FROM release
WHERE
  id = ?
`

func (q *Queries) DeleteRelease(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRelease, id)
	return err
}

const deleteRepo = `-- name: DeleteRepo :exec
DELETE FROM repo
WHERE
  id = ?
`

func (q *Queries) DeleteRepo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRepo, id)
	return err
}

const deleteTeamAdd = `-- name: DeleteTeamAdd :exec
DELETE FROM team_add
WHERE
  id = ?
`

func (q *Queries) DeleteTeamAdd(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeamAdd, id)
	return err
}

const deleteWatch = `-- name: DeleteWatch :exec
DELETE FROM watch
WHERE
  id = ?
`

func (q *Queries) DeleteWatch(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWatch, id)
	return err
}

const getActor = `-- name: GetActor :one
SELECT
  id, login, display_login, gravatar_id, url, avatar_url
FROM
  actor
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetActor(ctx context.Context, id int64) (Actor, error) {
	row := q.db.QueryRowContext(ctx, getActor, id)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.DisplayLogin,
		&i.GravatarID,
		&i.Url,
		&i.AvatarUrl,
	)
	return i, err
}

const getCommit = `-- name: GetCommit :one
SELECT
  id, payload_id, sha, author_email, author_name, message, url
FROM
  commit
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetCommit(ctx context.Context, id int64) (Commit, error) {
	row := q.db.QueryRowContext(ctx, getCommit, id)
	var i Commit
	err := row.Scan(
		&i.ID,
		&i.PayloadID,
		&i.Sha,
		&i.AuthorEmail,
		&i.AuthorName,
		&i.Message,
		&i.Url,
	)
	return i, err
}

const getCommits = `-- name: GetCommits :many
SELECT
  id, payload_id, sha, author_email, author_name, message, url
FROM
  commit
ORDER BY
  id ASC
`

func (q *Queries) GetCommits(ctx context.Context) ([]Commit, error) {
	rows, err := q.db.QueryContext(ctx, getCommits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Commit
	for rows.Next() {
		var i Commit
		if err := rows.Scan(
			&i.ID,
			&i.PayloadID,
			&i.Sha,
			&i.AuthorEmail,
			&i.AuthorName,
			&i.Message,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT
  id, event_id, type, actor_id, repo_id, payload_id, public, created_at, cached_at
FROM
  event
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.ActorID,
		&i.RepoID,
		&i.PayloadID,
		&i.Public,
		&i.CreatedAt,
		&i.CachedAt,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT
  id, event_id, type, actor_id, repo_id, payload_id, public, created_at, cached_at
FROM
  event
ORDER BY
  created_at DESC
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Type,
			&i.ActorID,
			&i.RepoID,
			&i.PayloadID,
			&i.Public,
			&i.CreatedAt,
			&i.CachedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFork = `-- name: GetFork :one
SELECT
  id, forkee_id, forkee_name, forkee_full_name, forkee_private
FROM
  fork
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetFork(ctx context.Context, id int64) (Fork, error) {
	row := q.db.QueryRowContext(ctx, getFork, id)
	var i Fork
	err := row.Scan(
		&i.ID,
		&i.ForkeeID,
		&i.ForkeeName,
		&i.ForkeeFullName,
		&i.ForkeePrivate,
	)
	return i, err
}

const getForks = `-- name: GetForks :many
SELECT
  id, forkee_id, forkee_name, forkee_full_name, forkee_private
FROM
  fork
ORDER BY
  forkee_name
`

func (q *Queries) GetForks(ctx context.Context) ([]Fork, error) {
	rows, err := q.db.QueryContext(ctx, getForks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fork
	for rows.Next() {
		var i Fork
		if err := rows.Scan(
			&i.ID,
			&i.ForkeeID,
			&i.ForkeeName,
			&i.ForkeeFullName,
			&i.ForkeePrivate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGollumPage = `-- name: GetGollumPage :one
SELECT
  id, page_name, title, summary, "action", sha, html_url
FROM
  gollum
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetGollumPage(ctx context.Context, id int64) (Gollum, error) {
	row := q.db.QueryRowContext(ctx, getGollumPage, id)
	var i Gollum
	err := row.Scan(
		&i.ID,
		&i.PageName,
		&i.Title,
		&i.Summary,
		&i.Action,
		&i.Sha,
		&i.HtmlUrl,
	)
	return i, err
}

const getGollumPages = `-- name: GetGollumPages :many
SELECT
  id, page_name, title, summary, "action", sha, html_url
FROM
  gollum
ORDER BY
  page_name ASC
`

func (q *Queries) GetGollumPages(ctx context.Context) ([]Gollum, error) {
	rows, err := q.db.QueryContext(ctx, getGollumPages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gollum
	for rows.Next() {
		var i Gollum
		if err := rows.Scan(
			&i.ID,
			&i.PageName,
			&i.Title,
			&i.Summary,
			&i.Action,
			&i.Sha,
			&i.HtmlUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIssue = `-- name: GetIssue :one
SELECT
  id, "action", issue_id, number, title, user_id, state, body, created_at, updated_at, closed_at
FROM
  issue
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetIssue(ctx context.Context, id int64) (Issue, error) {
	row := q.db.QueryRowContext(ctx, getIssue, id)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.IssueID,
		&i.Number,
		&i.Title,
		&i.UserID,
		&i.State,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const getIssueComment = `-- name: GetIssueComment :one
SELECT
  id, "action", issue_id, comment_id, comment_user_id, body, created_at, updated_at
FROM
  issue_comment
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetIssueComment(ctx context.Context, id int64) (IssueComment, error) {
	row := q.db.QueryRowContext(ctx, getIssueComment, id)
	var i IssueComment
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.IssueID,
		&i.CommentID,
		&i.CommentUserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIssueComments = `-- name: GetIssueComments :many
SELECT
  id, "action", issue_id, comment_id, comment_user_id, body, created_at, updated_at
FROM
  issue_comment
ORDER BY
  created_at DESC
`

func (q *Queries) GetIssueComments(ctx context.Context) ([]IssueComment, error) {
	rows, err := q.db.QueryContext(ctx, getIssueComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IssueComment
	for rows.Next() {
		var i IssueComment
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.IssueID,
			&i.CommentID,
			&i.CommentUserID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIssues = `-- name: GetIssues :many
SELECT
  id, "action", issue_id, number, title, user_id, state, body, created_at, updated_at, closed_at
FROM
  issue
ORDER BY
  user_id,
  updated_at
`

func (q *Queries) GetIssues(ctx context.Context) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, getIssues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.IssueID,
			&i.Number,
			&i.Title,
			&i.UserID,
			&i.State,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIssuesByUserID = `-- name: GetIssuesByUserID :many
SELECT
  id, "action", issue_id, number, title, user_id, state, body, created_at, updated_at, closed_at
FROM
  issue
WHERE
  user_id = ?
ORDER BY
  updated_at
`

func (q *Queries) GetIssuesByUserID(ctx context.Context, userID int64) ([]Issue, error) {
	rows, err := q.db.QueryContext(ctx, getIssuesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Issue
	for rows.Next() {
		var i Issue
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.IssueID,
			&i.Number,
			&i.Title,
			&i.UserID,
			&i.State,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMember = `-- name: GetMember :one
SELECT
  id, "action", member_id
FROM
  member
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetMember(ctx context.Context, id int64) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, id)
	var i Member
	err := row.Scan(&i.ID, &i.Action, &i.MemberID)
	return i, err
}

const getMembers = `-- name: GetMembers :many
SELECT
  id, "action", member_id
FROM
  member
ORDER BY
  action ASC
`

func (q *Queries) GetMembers(ctx context.Context) ([]Member, error) {
	rows, err := q.db.QueryContext(ctx, getMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(&i.ID, &i.Action, &i.MemberID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPRReviewComment = `-- name: GetPRReviewComment :one
SELECT
  id, "action", comment_id, pull_request_id, user_id, body, created_at, updated_at
FROM
  pr_review_comment
WHERE
  id = ?
LIMIT
  1
`

// Queries for pr_review_comment table
func (q *Queries) GetPRReviewComment(ctx context.Context, id int64) (PrReviewComment, error) {
	row := q.db.QueryRowContext(ctx, getPRReviewComment, id)
	var i PrReviewComment
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.CommentID,
		&i.PullRequestID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPRReviewComments = `-- name: GetPRReviewComments :many
SELECT
  id, "action", comment_id, pull_request_id, user_id, body, created_at, updated_at
FROM
  pr_review_comment
ORDER BY
  created_at DESC
`

func (q *Queries) GetPRReviewComments(ctx context.Context) ([]PrReviewComment, error) {
	rows, err := q.db.QueryContext(ctx, getPRReviewComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrReviewComment
	for rows.Next() {
		var i PrReviewComment
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.CommentID,
			&i.PullRequestID,
			&i.UserID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPRsByUserID = `-- name: GetPRsByUserID :many
SELECT
  id, "action", number, pull_request_id, state, title, user_id, body, created_at, updated_at, closed_at, merged_at
FROM
  pull_request
WHERE
  user_id = ?
ORDER BY
  updated_at
`

func (q *Queries) GetPRsByUserID(ctx context.Context, userID int64) ([]PullRequest, error) {
	rows, err := q.db.QueryContext(ctx, getPRsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PullRequest
	for rows.Next() {
		var i PullRequest
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.Number,
			&i.PullRequestID,
			&i.State,
			&i.Title,
			&i.UserID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.MergedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPullRequest = `-- name: GetPullRequest :one
SELECT
  id, "action", number, pull_request_id, state, title, user_id, body, created_at, updated_at, closed_at, merged_at
FROM
  pull_request
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetPullRequest(ctx context.Context, id int64) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, getPullRequest, id)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.Number,
		&i.PullRequestID,
		&i.State,
		&i.Title,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.MergedAt,
	)
	return i, err
}

const getPullRequestReview = `-- name: GetPullRequestReview :one
SELECT
  id, "action", review_id, pull_request_id, user_id, body, submitted_at
FROM
  pull_request_review
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetPullRequestReview(ctx context.Context, id int64) (PullRequestReview, error) {
	row := q.db.QueryRowContext(ctx, getPullRequestReview, id)
	var i PullRequestReview
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReviewID,
		&i.PullRequestID,
		&i.UserID,
		&i.Body,
		&i.SubmittedAt,
	)
	return i, err
}

const getPullRequestReviews = `-- name: GetPullRequestReviews :many
SELECT
  id, "action", review_id, pull_request_id, user_id, body, submitted_at
FROM
  pull_request_review
ORDER BY
  submitted_at DESC
`

func (q *Queries) GetPullRequestReviews(ctx context.Context) ([]PullRequestReview, error) {
	rows, err := q.db.QueryContext(ctx, getPullRequestReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PullRequestReview
	for rows.Next() {
		var i PullRequestReview
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.ReviewID,
			&i.PullRequestID,
			&i.UserID,
			&i.Body,
			&i.SubmittedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPullRequests = `-- name: GetPullRequests :many
SELECT
  id, "action", number, pull_request_id, state, title, user_id, body, created_at, updated_at, closed_at, merged_at
FROM
  pull_request
ORDER BY
  user_id,
  updated_at
`

func (q *Queries) GetPullRequests(ctx context.Context) ([]PullRequest, error) {
	rows, err := q.db.QueryContext(ctx, getPullRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PullRequest
	for rows.Next() {
		var i PullRequest
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.Number,
			&i.PullRequestID,
			&i.State,
			&i.Title,
			&i.UserID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.MergedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPush = `-- name: GetPush :one
SELECT
  id, push_id, repository_id, size, distinct_size, ref, head, "before"
FROM
  push
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetPush(ctx context.Context, id int64) (Push, error) {
	row := q.db.QueryRowContext(ctx, getPush, id)
	var i Push
	err := row.Scan(
		&i.ID,
		&i.PushID,
		&i.RepositoryID,
		&i.Size,
		&i.DistinctSize,
		&i.Ref,
		&i.Head,
		&i.Before,
	)
	return i, err
}

const getRefCreate = `-- name: GetRefCreate :one
SELECT
  id, ref, ref_type, master_branch, description, pusher_type
FROM
  ref_create
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetRefCreate(ctx context.Context, id int64) (RefCreate, error) {
	row := q.db.QueryRowContext(ctx, getRefCreate, id)
	var i RefCreate
	err := row.Scan(
		&i.ID,
		&i.Ref,
		&i.RefType,
		&i.MasterBranch,
		&i.Description,
		&i.PusherType,
	)
	return i, err
}

const getRefCreates = `-- name: GetRefCreates :many
SELECT
  id, ref, ref_type, master_branch, description, pusher_type
FROM
  ref_create
ORDER BY
  pusher_type
`

func (q *Queries) GetRefCreates(ctx context.Context) ([]RefCreate, error) {
	rows, err := q.db.QueryContext(ctx, getRefCreates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefCreate
	for rows.Next() {
		var i RefCreate
		if err := rows.Scan(
			&i.ID,
			&i.Ref,
			&i.RefType,
			&i.MasterBranch,
			&i.Description,
			&i.PusherType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefDelete = `-- name: GetRefDelete :one
SELECT
  id, ref, ref_type
FROM
  ref_delete
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetRefDelete(ctx context.Context, id int64) (RefDelete, error) {
	row := q.db.QueryRowContext(ctx, getRefDelete, id)
	var i RefDelete
	err := row.Scan(&i.ID, &i.Ref, &i.RefType)
	return i, err
}

const getRefDeletes = `-- name: GetRefDeletes :many
SELECT
  id, ref, ref_type
FROM
  ref_delete
ORDER BY
  ref_type
`

func (q *Queries) GetRefDeletes(ctx context.Context) ([]RefDelete, error) {
	rows, err := q.db.QueryContext(ctx, getRefDeletes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefDelete
	for rows.Next() {
		var i RefDelete
		if err := rows.Scan(&i.ID, &i.Ref, &i.RefType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRelease = `-- name: GetRelease :one
SELECT
  id, "action", release_id, tag_name, target_commitish, name, body, draft, prerelease, created_at, published_at
FROM
  release
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetRelease(ctx context.Context, id int64) (Release, error) {
	row := q.db.QueryRowContext(ctx, getRelease, id)
	var i Release
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReleaseID,
		&i.TagName,
		&i.TargetCommitish,
		&i.Name,
		&i.Body,
		&i.Draft,
		&i.Prerelease,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const getReleases = `-- name: GetReleases :many
SELECT
  id, "action", release_id, tag_name, target_commitish, name, body, draft, prerelease, created_at, published_at
FROM
  release
ORDER BY
  name
`

func (q *Queries) GetReleases(ctx context.Context) ([]Release, error) {
	rows, err := q.db.QueryContext(ctx, getReleases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Release
	for rows.Next() {
		var i Release
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.ReleaseID,
			&i.TagName,
			&i.TargetCommitish,
			&i.Name,
			&i.Body,
			&i.Draft,
			&i.Prerelease,
			&i.CreatedAt,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRepo = `-- name: GetRepo :one
SELECT
  id, name, url
FROM
  repo
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetRepo(ctx context.Context, id int64) (Repo, error) {
	row := q.db.QueryRowContext(ctx, getRepo, id)
	var i Repo
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const getTeamAdd = `-- name: GetTeamAdd :one
SELECT
  id, team_id, team_name, team_slug
FROM
  team_add
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetTeamAdd(ctx context.Context, id int64) (TeamAdd, error) {
	row := q.db.QueryRowContext(ctx, getTeamAdd, id)
	var i TeamAdd
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.TeamName,
		&i.TeamSlug,
	)
	return i, err
}

const getTeamAdds = `-- name: GetTeamAdds :many
SELECT
  id, team_id, team_name, team_slug
FROM
  team_add
ORDER BY
  team_name ASC
`

func (q *Queries) GetTeamAdds(ctx context.Context) ([]TeamAdd, error) {
	rows, err := q.db.QueryContext(ctx, getTeamAdds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamAdd
	for rows.Next() {
		var i TeamAdd
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.TeamName,
			&i.TeamSlug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWatch = `-- name: GetWatch :one
SELECT
  id, "action"
FROM
  watch
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetWatch(ctx context.Context, id int64) (Watch, error) {
	row := q.db.QueryRowContext(ctx, getWatch, id)
	var i Watch
	err := row.Scan(&i.ID, &i.Action)
	return i, err
}

const getWatches = `-- name: GetWatches :many
SELECT
  id, "action"
FROM
  watch
`

func (q *Queries) GetWatches(ctx context.Context) ([]Watch, error) {
	rows, err := q.db.QueryContext(ctx, getWatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Watch
	for rows.Next() {
		var i Watch
		if err := rows.Scan(&i.ID, &i.Action); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActors = `-- name: ListActors :many
SELECT
  id, login, display_login, gravatar_id, url, avatar_url
FROM
  actor
ORDER by
  login
`

func (q *Queries) ListActors(ctx context.Context) ([]Actor, error) {
	rows, err := q.db.QueryContext(ctx, listActors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.DisplayLogin,
			&i.GravatarID,
			&i.Url,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPushes = `-- name: ListPushes :many
SELECT
  id, push_id, repository_id, size, distinct_size, ref, head, "before"
FROM
  push
ORDER BY
  repository_id
`

func (q *Queries) ListPushes(ctx context.Context) ([]Push, error) {
	rows, err := q.db.QueryContext(ctx, listPushes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Push
	for rows.Next() {
		var i Push
		if err := rows.Scan(
			&i.ID,
			&i.PushID,
			&i.RepositoryID,
			&i.Size,
			&i.DistinctSize,
			&i.Ref,
			&i.Head,
			&i.Before,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepos = `-- name: ListRepos :many
SELECT
  id, name, url
FROM
  repo
ORDER by
  name
`

func (q *Queries) ListRepos(ctx context.Context) ([]Repo, error) {
	rows, err := q.db.QueryContext(ctx, listRepos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repo
	for rows.Next() {
		var i Repo
		if err := rows.Scan(&i.ID, &i.Name, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActor = `-- name: UpdateActor :one
UPDATE actor
SET
  login = ?,
  display_login = ?,
  gravatar_id = ?,
  url = ?,
  avatar_url = ?
WHERE
  id = ? RETURNING id, login, display_login, gravatar_id, url, avatar_url
`

type UpdateActorParams struct {
	Login        string         `json:"login"`
	DisplayLogin sql.NullString `json:"display_login"`
	GravatarID   sql.NullString `json:"gravatar_id"`
	Url          sql.NullString `json:"url"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateActor(ctx context.Context, arg UpdateActorParams) (Actor, error) {
	row := q.db.QueryRowContext(ctx, updateActor,
		arg.Login,
		arg.DisplayLogin,
		arg.GravatarID,
		arg.Url,
		arg.AvatarUrl,
		arg.ID,
	)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.DisplayLogin,
		&i.GravatarID,
		&i.Url,
		&i.AvatarUrl,
	)
	return i, err
}

const updateCommit = `-- name: UpdateCommit :one
UPDATE commit
SET
  payload_id = ?,
  sha = ?,
  author_email = ?,
  author_name = ?,
  message = ?,
  url = ?
WHERE
  id = ? RETURNING id, payload_id, sha, author_email, author_name, message, url
`

type UpdateCommitParams struct {
	PayloadID   int64  `json:"payload_id"`
	Sha         string `json:"sha"`
	AuthorEmail string `json:"author_email"`
	AuthorName  string `json:"author_name"`
	Message     string `json:"message"`
	Url         string `json:"url"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateCommit(ctx context.Context, arg UpdateCommitParams) (Commit, error) {
	row := q.db.QueryRowContext(ctx, updateCommit,
		arg.PayloadID,
		arg.Sha,
		arg.AuthorEmail,
		arg.AuthorName,
		arg.Message,
		arg.Url,
		arg.ID,
	)
	var i Commit
	err := row.Scan(
		&i.ID,
		&i.PayloadID,
		&i.Sha,
		&i.AuthorEmail,
		&i.AuthorName,
		&i.Message,
		&i.Url,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE event
SET
  event_id = ?,
  type = ?,
  actor_id = ?,
  repo_id = ?,
  payload_id = ?,
  public = ?,
  created_at = ?
WHERE
  id = ? RETURNING id, event_id, type, actor_id, repo_id, payload_id, public, created_at, cached_at
`

type UpdateEventParams struct {
	EventID   string    `json:"event_id"`
	Type      string    `json:"type"`
	ActorID   int64     `json:"actor_id"`
	RepoID    int64     `json:"repo_id"`
	PayloadID int64     `json:"payload_id"`
	Public    bool      `json:"public"`
	CreatedAt time.Time `json:"created_at"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.EventID,
		arg.Type,
		arg.ActorID,
		arg.RepoID,
		arg.PayloadID,
		arg.Public,
		arg.CreatedAt,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.ActorID,
		&i.RepoID,
		&i.PayloadID,
		&i.Public,
		&i.CreatedAt,
		&i.CachedAt,
	)
	return i, err
}

const updateFork = `-- name: UpdateFork :one
UPDATE fork
SET
  forkee_id = ?,
  forkee_name = ?,
  forkee_full_name = ?,
  forkee_private = ?
WHERE
  id = ? RETURNING id, forkee_id, forkee_name, forkee_full_name, forkee_private
`

type UpdateForkParams struct {
	ForkeeID       int64  `json:"forkee_id"`
	ForkeeName     string `json:"forkee_name"`
	ForkeeFullName string `json:"forkee_full_name"`
	ForkeePrivate  bool   `json:"forkee_private"`
	ID             int64  `json:"id"`
}

func (q *Queries) UpdateFork(ctx context.Context, arg UpdateForkParams) (Fork, error) {
	row := q.db.QueryRowContext(ctx, updateFork,
		arg.ForkeeID,
		arg.ForkeeName,
		arg.ForkeeFullName,
		arg.ForkeePrivate,
		arg.ID,
	)
	var i Fork
	err := row.Scan(
		&i.ID,
		&i.ForkeeID,
		&i.ForkeeName,
		&i.ForkeeFullName,
		&i.ForkeePrivate,
	)
	return i, err
}

const updateGollumPage = `-- name: UpdateGollumPage :one
UPDATE gollum
SET
  page_name = ?,
  title = ?,
  summary = ?,
  action = ?,
  sha = ?,
  html_url = ?
WHERE
  id = ? RETURNING id, page_name, title, summary, "action", sha, html_url
`

type UpdateGollumPageParams struct {
	PageName string         `json:"page_name"`
	Title    string         `json:"title"`
	Summary  sql.NullString `json:"summary"`
	Action   string         `json:"action"`
	Sha      string         `json:"sha"`
	HtmlUrl  string         `json:"html_url"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateGollumPage(ctx context.Context, arg UpdateGollumPageParams) (Gollum, error) {
	row := q.db.QueryRowContext(ctx, updateGollumPage,
		arg.PageName,
		arg.Title,
		arg.Summary,
		arg.Action,
		arg.Sha,
		arg.HtmlUrl,
		arg.ID,
	)
	var i Gollum
	err := row.Scan(
		&i.ID,
		&i.PageName,
		&i.Title,
		&i.Summary,
		&i.Action,
		&i.Sha,
		&i.HtmlUrl,
	)
	return i, err
}

const updateIssue = `-- name: UpdateIssue :one
UPDATE issue
SET
  action = ?,
  number = ?,
  issue_id = ?,
  state = ?,
  title = ?,
  user_id = ?,
  body = ?,
  updated_at = ?,
  closed_at = ?
WHERE
  id = ? RETURNING id, "action", issue_id, number, title, user_id, state, body, created_at, updated_at, closed_at
`

type UpdateIssueParams struct {
	Action    string         `json:"action"`
	Number    int64          `json:"number"`
	IssueID   int64          `json:"issue_id"`
	State     string         `json:"state"`
	Title     string         `json:"title"`
	UserID    int64          `json:"user_id"`
	Body      sql.NullString `json:"body"`
	UpdatedAt time.Time      `json:"updated_at"`
	ClosedAt  sql.NullTime   `json:"closed_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateIssue(ctx context.Context, arg UpdateIssueParams) (Issue, error) {
	row := q.db.QueryRowContext(ctx, updateIssue,
		arg.Action,
		arg.Number,
		arg.IssueID,
		arg.State,
		arg.Title,
		arg.UserID,
		arg.Body,
		arg.UpdatedAt,
		arg.ClosedAt,
		arg.ID,
	)
	var i Issue
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.IssueID,
		&i.Number,
		&i.Title,
		&i.UserID,
		&i.State,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const updateIssueComment = `-- name: UpdateIssueComment :one
UPDATE issue_comment
SET
  action = ?,
  issue_id = ?,
  comment_id = ?,
  comment_user_id = ?,
  body = ?,
  created_at = ?,
  updated_at = ?
WHERE
  id = ? RETURNING id, "action", issue_id, comment_id, comment_user_id, body, created_at, updated_at
`

type UpdateIssueCommentParams struct {
	Action        string    `json:"action"`
	IssueID       int64     `json:"issue_id"`
	CommentID     int64     `json:"comment_id"`
	CommentUserID int64     `json:"comment_user_id"`
	Body          string    `json:"body"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	ID            int64     `json:"id"`
}

func (q *Queries) UpdateIssueComment(ctx context.Context, arg UpdateIssueCommentParams) (IssueComment, error) {
	row := q.db.QueryRowContext(ctx, updateIssueComment,
		arg.Action,
		arg.IssueID,
		arg.CommentID,
		arg.CommentUserID,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i IssueComment
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.IssueID,
		&i.CommentID,
		&i.CommentUserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMember = `-- name: UpdateMember :one
UPDATE member
SET
  action = ?,
  member_id = ?
WHERE
  id = ? RETURNING id, "action", member_id
`

type UpdateMemberParams struct {
	Action   string `json:"action"`
	MemberID int64  `json:"member_id"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember, arg.Action, arg.MemberID, arg.ID)
	var i Member
	err := row.Scan(&i.ID, &i.Action, &i.MemberID)
	return i, err
}

const updatePRReviewComment = `-- name: UpdatePRReviewComment :one
UPDATE pr_review_comment
SET
  action = ?,
  comment_id = ?,
  pull_request_id = ?,
  user_id = ?,
  body = ?,
  created_at = ?,
  updated_at = ?
WHERE
  id = ? RETURNING id, "action", comment_id, pull_request_id, user_id, body, created_at, updated_at
`

type UpdatePRReviewCommentParams struct {
	Action        string    `json:"action"`
	CommentID     int64     `json:"comment_id"`
	PullRequestID int64     `json:"pull_request_id"`
	UserID        int64     `json:"user_id"`
	Body          string    `json:"body"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	ID            int64     `json:"id"`
}

func (q *Queries) UpdatePRReviewComment(ctx context.Context, arg UpdatePRReviewCommentParams) (PrReviewComment, error) {
	row := q.db.QueryRowContext(ctx, updatePRReviewComment,
		arg.Action,
		arg.CommentID,
		arg.PullRequestID,
		arg.UserID,
		arg.Body,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i PrReviewComment
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.CommentID,
		&i.PullRequestID,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePullRequest = `-- name: UpdatePullRequest :one
UPDATE pull_request
SET
  action = ?,
  number = ?,
  pull_request_id = ?,
  state = ?,
  title = ?,
  user_id = ?,
  body = ?,
  updated_at = ?,
  closed_at = ?,
  merged_at = ?
WHERE
  id = ? RETURNING id, "action", number, pull_request_id, state, title, user_id, body, created_at, updated_at, closed_at, merged_at
`

type UpdatePullRequestParams struct {
	Action        string         `json:"action"`
	Number        int64          `json:"number"`
	PullRequestID int64          `json:"pull_request_id"`
	State         string         `json:"state"`
	Title         string         `json:"title"`
	UserID        int64          `json:"user_id"`
	Body          sql.NullString `json:"body"`
	UpdatedAt     time.Time      `json:"updated_at"`
	ClosedAt      sql.NullTime   `json:"closed_at"`
	MergedAt      sql.NullTime   `json:"merged_at"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdatePullRequest(ctx context.Context, arg UpdatePullRequestParams) (PullRequest, error) {
	row := q.db.QueryRowContext(ctx, updatePullRequest,
		arg.Action,
		arg.Number,
		arg.PullRequestID,
		arg.State,
		arg.Title,
		arg.UserID,
		arg.Body,
		arg.UpdatedAt,
		arg.ClosedAt,
		arg.MergedAt,
		arg.ID,
	)
	var i PullRequest
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.Number,
		&i.PullRequestID,
		&i.State,
		&i.Title,
		&i.UserID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
		&i.MergedAt,
	)
	return i, err
}

const updatePullRequestReview = `-- name: UpdatePullRequestReview :one
UPDATE pull_request_review
SET
  action = ?,
  review_id = ?,
  pull_request_id = ?,
  user_id = ?,
  body = ?,
  submitted_at = ?
WHERE
  id = ? RETURNING id, "action", review_id, pull_request_id, user_id, body, submitted_at
`

type UpdatePullRequestReviewParams struct {
	Action        string         `json:"action"`
	ReviewID      int64          `json:"review_id"`
	PullRequestID int64          `json:"pull_request_id"`
	UserID        int64          `json:"user_id"`
	Body          sql.NullString `json:"body"`
	SubmittedAt   time.Time      `json:"submitted_at"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdatePullRequestReview(ctx context.Context, arg UpdatePullRequestReviewParams) (PullRequestReview, error) {
	row := q.db.QueryRowContext(ctx, updatePullRequestReview,
		arg.Action,
		arg.ReviewID,
		arg.PullRequestID,
		arg.UserID,
		arg.Body,
		arg.SubmittedAt,
		arg.ID,
	)
	var i PullRequestReview
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReviewID,
		&i.PullRequestID,
		&i.UserID,
		&i.Body,
		&i.SubmittedAt,
	)
	return i, err
}

const updateRefCreate = `-- name: UpdateRefCreate :one
UPDATE ref_create
SET
  ref = ?,
  ref_type = ?,
  master_branch = ?,
  description = ?,
  pusher_type = ?
WHERE
  id = ? RETURNING id, ref, ref_type, master_branch, description, pusher_type
`

type UpdateRefCreateParams struct {
	Ref          sql.NullString `json:"ref"`
	RefType      string         `json:"ref_type"`
	MasterBranch sql.NullString `json:"master_branch"`
	Description  sql.NullString `json:"description"`
	PusherType   string         `json:"pusher_type"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateRefCreate(ctx context.Context, arg UpdateRefCreateParams) (RefCreate, error) {
	row := q.db.QueryRowContext(ctx, updateRefCreate,
		arg.Ref,
		arg.RefType,
		arg.MasterBranch,
		arg.Description,
		arg.PusherType,
		arg.ID,
	)
	var i RefCreate
	err := row.Scan(
		&i.ID,
		&i.Ref,
		&i.RefType,
		&i.MasterBranch,
		&i.Description,
		&i.PusherType,
	)
	return i, err
}

const updateRefDelete = `-- name: UpdateRefDelete :one
UPDATE ref_delete
SET
  ref = ?,
  ref_type = ?
WHERE
  id = ? RETURNING id, ref, ref_type
`

type UpdateRefDeleteParams struct {
	Ref     sql.NullString `json:"ref"`
	RefType string         `json:"ref_type"`
	ID      int64          `json:"id"`
}

func (q *Queries) UpdateRefDelete(ctx context.Context, arg UpdateRefDeleteParams) (RefDelete, error) {
	row := q.db.QueryRowContext(ctx, updateRefDelete, arg.Ref, arg.RefType, arg.ID)
	var i RefDelete
	err := row.Scan(&i.ID, &i.Ref, &i.RefType)
	return i, err
}

const updateRelease = `-- name: UpdateRelease :one
UPDATE release
SET
  action = ?,
  release_id = ?,
  tag_name = ?,
  target_commitish = ?,
  name = ?,
  body = ?,
  prerelease = ?,
  published_at = ?
WHERE
  id = ? RETURNING id, "action", release_id, tag_name, target_commitish, name, body, draft, prerelease, created_at, published_at
`

type UpdateReleaseParams struct {
	Action          string         `json:"action"`
	ReleaseID       int64          `json:"release_id"`
	TagName         string         `json:"tag_name"`
	TargetCommitish string         `json:"target_commitish"`
	Name            sql.NullString `json:"name"`
	Body            sql.NullString `json:"body"`
	Prerelease      bool           `json:"prerelease"`
	PublishedAt     time.Time      `json:"published_at"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateRelease(ctx context.Context, arg UpdateReleaseParams) (Release, error) {
	row := q.db.QueryRowContext(ctx, updateRelease,
		arg.Action,
		arg.ReleaseID,
		arg.TagName,
		arg.TargetCommitish,
		arg.Name,
		arg.Body,
		arg.Prerelease,
		arg.PublishedAt,
		arg.ID,
	)
	var i Release
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReleaseID,
		&i.TagName,
		&i.TargetCommitish,
		&i.Name,
		&i.Body,
		&i.Draft,
		&i.Prerelease,
		&i.CreatedAt,
		&i.PublishedAt,
	)
	return i, err
}

const updateRepo = `-- name: UpdateRepo :one
UPDATE repo
SET
  name = ?,
  url = ?
WHERE
  id = ? RETURNING id, name, url
`

type UpdateRepoParams struct {
	Name string `json:"name"`
	Url  string `json:"url"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateRepo(ctx context.Context, arg UpdateRepoParams) (Repo, error) {
	row := q.db.QueryRowContext(ctx, updateRepo, arg.Name, arg.Url, arg.ID)
	var i Repo
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const updateTeamAdd = `-- name: UpdateTeamAdd :one
UPDATE team_add
SET
  team_id = ?,
  team_name = ?,
  team_slug = ?
WHERE
  id = ? RETURNING id, team_id, team_name, team_slug
`

type UpdateTeamAddParams struct {
	TeamID   int64  `json:"team_id"`
	TeamName string `json:"team_name"`
	TeamSlug string `json:"team_slug"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateTeamAdd(ctx context.Context, arg UpdateTeamAddParams) (TeamAdd, error) {
	row := q.db.QueryRowContext(ctx, updateTeamAdd,
		arg.TeamID,
		arg.TeamName,
		arg.TeamSlug,
		arg.ID,
	)
	var i TeamAdd
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.TeamName,
		&i.TeamSlug,
	)
	return i, err
}

const updateWatch = `-- name: UpdateWatch :one
UPDATE watch
SET
  action = ?
WHERE
  id = ? RETURNING id, "action"
`

type UpdateWatchParams struct {
	Action string `json:"action"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateWatch(ctx context.Context, arg UpdateWatchParams) (Watch, error) {
	row := q.db.QueryRowContext(ctx, updateWatch, arg.Action, arg.ID)
	var i Watch
	err := row.Scan(&i.ID, &i.Action)
	return i, err
}
